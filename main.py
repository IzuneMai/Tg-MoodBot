import os
import sqlite3
from datetime import datetime, timedelta
from io import BytesIO
import math

import matplotlib.pyplot as plt
import telebot

bot = telebot.TeleBot('8495023692:AAGYNbqOVCWnizEmU2h3onC0elJxSRTIrAI')

#–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

DB_PATH = "moods.db"
def get_db():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS moods (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            dt TEXT NOT NULL,           -- ISO8601
            emoji TEXT NOT NULL,
            comment TEXT
        )
    """)
    conn.commit()
    return conn

# –û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ —ç–º–æ–¥–∑–∏
scores = {
    "üò¢": 1, "üò°": 1,
    "üòï": 2, "üò¥": 2,
    "üòê": 3,
    "üôÇ": 4,
    "üòÄ": 5, "üòå": 5,
}
supported = list(scores.keys())

def now():
    return datetime.now()

def save_mood(chat_id: int, emoji: str, comment: str | None):
    conn = get_db()
    conn.execute(
        "INSERT INTO moods(chat_id, dt, emoji, comment) VALUES (?, ?, ?, ?)",
        (chat_id, now().isoformat(timespec="seconds"), emoji, comment)
    )
    conn.commit()
    conn.close()

def get_today_last(chat_id: int):
    start = now().replace(hour=0, minute=0, second=0)
    end = start + timedelta(days=1)
    conn = get_db()
    cur = conn.execute(
        "SELECT emoji, comment, dt FROM moods WHERE chat_id=? AND dt BETWEEN ? AND ? ORDER BY dt DESC LIMIT 1",
        (chat_id, start.isoformat(), end.isoformat())
    )
    row = cur.fetchone()
    conn.close()
    return row  # (emoji, comment, dt) –∏–ª–∏ None

def get_daily_scores(chat_id: int, days: int = 7):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –¥–∞—Ç (str) –∏ —Å—Ä–µ–¥–Ω–∏—Ö –±–∞–ª–ª–æ–≤ (float|nan) –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    labels, values = [], []
    conn = get_db()
    for i in range(days-1, -1, -1):
        day = (now() - timedelta(days=i)).replace(hour=0, minute=0, second=0, microsecond=0)
        day_end = day + timedelta(days=1)
        cur = conn.execute(
            "SELECT emoji FROM moods WHERE chat_id=? AND dt BETWEEN ? AND ?",
            (chat_id, day.isoformat(), day_end.isoformat())
        )
        emojis = [r[0] for r in cur.fetchall()]
        scores = [scores[e] for e in emojis if e in scores]
        avg = sum(scores)/len(scores) if scores else math.nan
        labels.append(day.strftime("%d.%m"))
        values.append(avg)
    conn.close()
    return labels, values

def plot_chart(labels, values):
    fig, ax = plt.subplots(figsize=(6, 3))
    ax.plot(labels, values, marker="o", color="#5b8def", linewidth=2)
    ax.set_ylim(0.5, 5.5)
    ax.set_yticks([1,2,3,4,5])
    ax.set_ylabel("–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
    ax.set_title("–¢–≤–æ—è –Ω–µ–¥–µ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")
    ax.grid(True, linestyle="--", alpha=0.4)
    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ ¬´—Å–µ–≥–æ–¥–Ω—è¬ª
    ax.scatter([labels[-1]], [values[-1]], color="#e85d75", zorder=3)
    fig.tight_layout()
    buf = BytesIO()
    fig.savefig(buf, format="png", dpi=200)
    plt.close(fig)
    buf.seek(0)
    bot.send_document(buf)
    return buf
    

#–ö–æ–º–∞–Ω–¥—ã
HELP_TEXT = (
    "–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.\n\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "‚Ä¢ /start\n"
    "‚Ä¢ /help\n"
    "‚Ä¢ /mood [—ç–º–æ–¥–∑–∏] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]\n"
    "  –ø—Ä–∏–º–µ—Ä: /–ºood üôÇ —Å–ø–æ–∫–æ–π–Ω—ã–π –¥–µ–Ω—å\n"
    "‚Ä¢ /today ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
    "‚Ä¢ /diagram ‚Äî –Ω–µ–¥–µ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (PNG)\n\n"
    f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —ç–º–æ–¥–∑–∏: {' '.join(supported)}"
)

@bot.message_handler(commands = ['start'])
def main(message):
    bot.send_message(message.chat.id, f'–ó–¥–∞—Ä–æ–≤–∞, {message.from_user.first_name}, –µ–ø—Ç–∞')

@bot.message_handler(commands = ['help'])
def main(message):
    bot.send_message(message.chat.id, HELP_TEXT)

@bot.message_handler(commands=["mood", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"])
def mood_cmd(message):
    # –û–∂–∏–¥–∞–µ–º: /mood üôÇ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç...
    parts = message.text.split(maxsplit=2)
    if len(parts) < 2:
        return bot.reply_to(message, "–î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏: –Ω–∞–ø—Ä–∏–º–µ—Ä, /mood üôÇ —Å–ø–æ–∫–æ–π–Ω—ã–π –¥–µ–Ω—å")
    emoji = parts[1]
    comment = parts[2] if len(parts) >= 3 else None

    if emoji not in supported:
        return bot.reply_to(
            message,
            f"–ü–æ–∫–∞ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —ç—Ç–∏ —ç–º–æ–¥–∑–∏: {' '.join(supported)}\n"
            "–ü—Ä–∏–º–µ—Ä: /mood üôÇ –ø—Ä–æ–≥—É–ª–∫–∞ —É–¥–∞–ª–∞—Å—å"
        )

    save_mood(message.chat.id, emoji, comment)
    suffix = f" ‚Äî {comment}" if comment else ""
    bot.reply_to(message, f"–°–æ—Ö—Ä–∞–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {emoji}{suffix}")

@bot.message_handler()
def mess(message):
    if message.text.lower() == "/today":
        row = get_today_last(message.chat.id)
        if not row:
            return bot.reply_to(message, "–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–∏. –ù–∞–ø–∏—à–∏: /mood üôÇ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        emoji, comment, dt = row
        t = datetime.fromisoformat(dt).strftime("%H:%M")
        suffix = f" ‚Äî {comment}" if comment else ""
        bot.reply_to(message, f"–°–µ–≥–æ–¥–Ω—è –≤ {t}: {emoji}{suffix}")
    elif message.text.lower() == '/diagram':
        labels, values = get_daily_scores(message.chat.id, days=7)
        buf = plot_chart(labels, values)
        bot.send_photo(message.chat.id, buf, caption="–ù–µ–¥–µ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (1 ‚Äî –≥—Ä—É—Å—Ç–Ω–æ, 5 ‚Äî –æ—Ç–ª–∏—á–Ω–æ)")


# –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–ª–∞–ª —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–±–æ—Ä–∞
@bot.message_handler(func=lambda m: m.text and m.text.strip() in supported)
def quick_mood(message):
    emoji = message.text.strip()
    save_mood(message.chat.id, emoji, None)
    bot.reply_to(message, f"–°–æ—Ö—Ä–∞–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {emoji}")

if __name__ == "__main__":
    print("Bot is running...")
    bot.infinity_polling(skip_pending=True, allowed_updates=["message"])